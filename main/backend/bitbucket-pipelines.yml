# This is an example Starter pipeline configuration
# Use a skeleton to build, test and deploy using manual and parallel steps
# -----
# You can specify a custom docker image from Docker Hub as your build environment.

image: atlassian/default-image:3

options:      
  docker: true
  size: 2x

pipelines:
  default:
    - parallel:
      - step:
          name: Build and push Api-usuarios
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiUsuario/dockerfile --tag sispe-apiusuario-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-apiusuario-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          name: Build and push Api-intermediacion
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiIntermediacion/dockerfile --tag sispe-intermediacion-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-intermediacion-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          size: 2x
          name: Build and push Api-Parametrico
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiParametrico/dockerfile --tag sispe-apiparametrico-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-apiparametrico-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          size: 2x
          name: Build and push Api-Ciudadano
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiCiudadano/dockerfile --tag sispe-apiciudadano-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-apiciudadano-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          name: Build and push Api-Gateway
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiGateway/dockerfile --tag sispe-apigateway-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-apigateway-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          name: Build and push Api-Prestador
          oidc: true
          services:
            - docker
          script:
            # change directory to application folder
            - docker  build -f SispeServiciosApiPrestador/dockerfile --tag sispe-apiprestador-ecr .
            - export AWS_REGION=$REGION
            - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
            - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
            - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
            - pipe: atlassian/aws-ecr-push-image:1.6.2
              variables:
                AWS_DEFAULT_REGION: $REGION
                AWS_OIDC_ROLE_ARN: 'arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE'
                IMAGE_NAME: sispe-apiprestador-ecr
                TAGS: $BITBUCKET_BUILD_NUMBER
      - step:
          name: 'Lint'
          script:
            - echo "Your linting goes here..."
      - step:
          name: 'Security scan'
          script:
            - echo "Your security scan goes here..."

    # The following deployment steps will be executed for each pipeline run. To configure your steps and conditionally deploy see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/
    - step:
        oidc: true
        name: 'Deploy Api-usuarios'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-apiusuario
          - export FOLDER=sispeserviciosapiusuario
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/SispeServiciosApiUsuario/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        oidc: true
        name: 'Deploy Api-Ciudadano'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-apiciudadano
          - export FOLDER=SispeServiciosApiCiudadano
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/SispeServiciosApiUsuario/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        oidc: true
        name: 'Deploy Api-Gateway'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-apigateway
          - export FOLDER=SispeServiciosApiGateway
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/$FOLDER/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        oidc: true
        name: 'Deploy Api-Intermediacion'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-intermediacion
          - export FOLDER=SispeServiciosApiIntermediacion
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/$FOLDER/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        oidc: true
        name: 'Deploy Api-Parametrico'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-apiparametrico
          - export FOLDER=SispeServiciosApiParametrico
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/$FOLDER/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        oidc: true
        name: 'Deploy Api-Prestador'
        script:
          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          - unzip awscliv2.zip
          - aws/install
          - export NS=test
          - export API=sispe-apiprestador
          - export FOLDER=SispeServiciosApiPrestador
          - export REPL=1 
          - export PORT=80
          - export AWS_REGION=$REGION
          - export CIMAGEN=$API-ecr:$BITBUCKET_BUILD_NUMBER
          - export CPORT=8080
          - export AWS_ROLE_ARN=arn:aws:iam::125264681808:role/AWS_BITBUCKET_ROLE
          - export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token
          - echo $BITBUCKET_STEP_OIDC_TOKEN > $(pwd)/web-identity-token
          - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          - chmod +x kubectl
          - mv kubectl /usr/local/bin
          - aws eks update-kubeconfig --name staging-sispe-eks
          - ls
          - if ! kubectl get ns test ;then kubectl create ns test ; fi
          - pwd
          - cat 
          - cd /opt/atlassian/pipelines/agent/build/$FOLDER/Manifests
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NAME}#/$API/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{NS}#/$NS/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{REPL}#/$REPL/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CPORT}#/$PORT/g"
          - find ./ -name "*.yml" -print | xargs sed -i "s/#{CIMAGE}#/$CIMAGEN/g"
          - cat deployment.yml
          - cat services.yml
          - kubectl apply -f deployment.yml
          - kubectl apply -f hpa.yml 
          - kubectl apply -f services.yml
    - step:
        name: 'Deployment to Production'
        deployment: production
        trigger: 'manual'
        script:
          - echo "Your deployment to production script goes here..."
definitions:
  services:
    docker:
      memory: 4096